2.1 Какой класс является основным в библиотеке NumPy?
Основным классом в NumPy является numpy.ndarray (n-dimensional array). Это многомерный массив, который позволяет хранить и эффективно обрабатывать однотипные данные (числа, строки и др.).

2.2 Что определяет метод zeros()?
Метод numpy.zeros() создаёт новый массив заданной формы (shape), заполненный нулями.

2.3 Каким образом можно транспонировать оси многомерного массива в NumPy?
Для транспонирования осей многомерного массива можно использовать: numpy.transpose() или метод .T для простого транспонирования (как в матрицах).

3.1. На основе какой библиотеки Python реализована библиотека Pandas?

Библиотека Pandas построена на основе NumPy (использует его для хранения и обработки данных.

3.2. Каков тип Series.values?

Атрибут Series.values возвращает данные Series в виде массива NumPy (numpy.ndarray).

3.3. Дайте определение объекту библиотеки DataFrame?

DataFrame — это:

    Табличная структура данных (аналог таблицы в SQL или Excel).

    Состоит из строк (index) и столбцов (columns).

    Каждый столбец — это Series (однотипные данные).

    Может содержать разные типы данных в разных столбцах (числа, строки, даты и т.д.).

3.4. Основные операции для работы с DataFrame:

    Создание:

        Из словаря: pd.DataFrame({'col1': [1, 2], 'col2': ['a', 'b']}).

        Из CSV: pd.read_csv('file.csv').

    Просмотр данных:

        df.head() — первые 5 строк.

    Выбор данных:

        По столбцам: df['A'] или df[['A', 'B']].

        По строкам: df.loc[0] (по индексу), df.iloc[0] (по позиции).

        Фильтрация: df[df['A'] > 2].

    Агрегация:

        Группировка: df.groupby('A').mean().

    Сортировка:

        df.sort_values(by='A', ascending=False).

    Слияние данных:

        pd.merge(df1, df2, on='key').

        pd.concat([df1, df2]).

    Экспорт:

        В CSV: df.to_csv('output.csv').

4.1. Как подключить библиотеку Matplotlib к программе Python?

4.2. Как переопределить размеры фигуры и области рисования?
Способ 1: При создании фигуры (plt.figure)

Используйте параметр figsize (ширина и высота в дюймах):
python

plt.figure(figsize=(8, 4))  # 8 дюймов в ширину, 4 в высоту
plt.plot([1, 2, 3], [4, 5, 1])
plt.show()

Способ 2: Через объект Figure и Axes (более гибкий)
fig, ax = plt.subplots(figsize=(10, 5))  # 10x5 дюймов
ax.plot([1, 2, 3], [4, 5, 1])
plt.show()

Способ 3: Изменение существующей фигуры
python

fig = plt.gcf()  # Получить текущую фигуру
fig.set_size_inches(12, 6)  # Изменить размер



